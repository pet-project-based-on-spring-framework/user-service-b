import com.github.spotbugs.snom.SpotBugsReport

plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'checkstyle'
    id "com.github.spotbugs" version "4.6.0"
}

group = 'com.trl'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2020.0.1")
    set('springdocVersion', "1.5.3")
    set('testcontainersVersion', "1.15.1")
    set('modelMapperVersion', "2.3.8")
    set('postgresVersion', "42.2.18")
    set('liquibaseVersion', "4.2.2")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springdoc:springdoc-openapi-ui:${springdocVersion}"
    implementation 'javax.cache:cache-api'
    implementation 'org.ehcache:ehcache'
    implementation "org.modelmapper:modelmapper:${modelMapperVersion}"
    implementation "org.postgresql:postgresql:${postgresVersion}"
    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sourceCompatibility = '1.11'
targetCompatibility = '1.11'

test {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = "8.10.1"
    showViolations = true
    ignoreFailures = false
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

spotbugs {
    toolVersion = '4.2.0'
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    excludeFilter = file("config/spotbugs/exclude.xml")
}

spotbugsMain {
    reports(({
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugsMain.html")
            stylesheet = 'fancy-hist.xsl'
        }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}

spotbugsTest {
    reports(({
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugsTest.html")
            stylesheet = 'fancy-hist.xsl'
        }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}

test.mustRunAfter checkstyleMain, checkstyleTest, spotbugsMain, spotbugsTest
